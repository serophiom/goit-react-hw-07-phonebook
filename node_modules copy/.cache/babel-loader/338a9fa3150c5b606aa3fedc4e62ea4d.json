{"ast":null,"code":"import * as contactsActions from './contacts-actions';\nimport * as contactsAPI from './contacts-api';\naxios.defaults.baseURL = 'http://localhost:3000';\nexport const fetchContacts = () => async dispatch => {\n  dispatch(contactsActions.fetchContactsRequest());\n\n  try {\n    const {\n      data\n    } = await axios.get('/contacts');\n    dispatch(contactsActions.fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(contactsActions.fetchContactsError(error));\n  }\n};\nexport const addContact = (name, number) => async dispatch => {\n  const contact = {\n    name,\n    number\n  };\n  dispatch(addContactRequest());\n\n  try {\n    const {\n      data\n    } = await axios.post('/contacts', contact);\n    dispatch(contactsActions.addContactSuccess(data));\n  } catch (error) {\n    dispatch(contactsActions.addContactError(error));\n  }\n};\nexport const deleteContact = contactId => dispatch => {\n  dispatch(contactsActions.deleteContactRequest());\n  axios.delete(`contacts/${contactId}`).then(() => dispatch(contactsActions.deleteContactSuccess(contactId))).catch(error => dispatch(contactsActions.deleteContactError(error)));\n};","map":{"version":3,"sources":["C:/Users/Stas/Documents/GitHub/goit-react-hw-06-phonebook/src/redux/contacts-operations.js"],"names":["contactsActions","contactsAPI","axios","defaults","baseURL","fetchContacts","dispatch","fetchContactsRequest","data","get","fetchContactsSuccess","error","fetchContactsError","addContact","name","number","contact","addContactRequest","post","addContactSuccess","addContactError","deleteContact","contactId","deleteContactRequest","delete","then","deleteContactSuccess","catch","deleteContactError"],"mappings":"AAAA,OAAO,KAAKA,eAAZ,MAAiC,oBAAjC;AACA,OAAO,KAAKC,WAAZ,MAA6B,gBAA7B;AAEAC,KAAK,CAACC,QAAN,CAAeC,OAAf,GAAyB,uBAAzB;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM,MAAMC,QAAN,IAAkB;AACjDA,EAAAA,QAAQ,CAACN,eAAe,CAACO,oBAAhB,EAAD,CAAR;;AAEA,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMN,KAAK,CAACO,GAAN,CAAU,WAAV,CAAvB;AACAH,IAAAA,QAAQ,CAACN,eAAe,CAACU,oBAAhB,CAAqCF,IAArC,CAAD,CAAR;AACD,GAHD,CAGE,OAAOG,KAAP,EAAc;AACdL,IAAAA,QAAQ,CAACN,eAAe,CAACY,kBAAhB,CAAmCD,KAAnC,CAAD,CAAR;AACD;AACF,CATI;AAWL,OAAO,MAAME,UAAU,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB,MAAMT,QAAN,IAAkB;AAC5D,QAAMU,OAAO,GAAG;AACdF,IAAAA,IADc;AAEdC,IAAAA;AAFc,GAAhB;AAKAT,EAAAA,QAAQ,CAACW,iBAAiB,EAAlB,CAAR;;AAEA,MAAI;AACF,UAAM;AAAET,MAAAA;AAAF,QAAW,MAAMN,KAAK,CAACgB,IAAN,CAAW,WAAX,EAAwBF,OAAxB,CAAvB;AACAV,IAAAA,QAAQ,CAACN,eAAe,CAACmB,iBAAhB,CAAkCX,IAAlC,CAAD,CAAR;AACD,GAHD,CAGE,OAAOG,KAAP,EAAc;AACdL,IAAAA,QAAQ,CAACN,eAAe,CAACoB,eAAhB,CAAgCT,KAAhC,CAAD,CAAR;AACD;AACF,CAdM;AAgBP,OAAO,MAAMU,aAAa,GAAGC,SAAS,IAAIhB,QAAQ,IAAI;AACpDA,EAAAA,QAAQ,CAACN,eAAe,CAACuB,oBAAhB,EAAD,CAAR;AAEArB,EAAAA,KAAK,CACFsB,MADH,CACW,YAAWF,SAAU,EADhC,EAEGG,IAFH,CAEQ,MAAMnB,QAAQ,CAACN,eAAe,CAAC0B,oBAAhB,CAAqCJ,SAArC,CAAD,CAFtB,EAGGK,KAHH,CAGShB,KAAK,IAAIL,QAAQ,CAACN,eAAe,CAAC4B,kBAAhB,CAAmCjB,KAAnC,CAAD,CAH1B;AAID,CAPM","sourcesContent":["import * as contactsActions from './contacts-actions';\r\nimport * as contactsAPI from './contacts-api';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3000';\r\n\r\nexport const fetchContacts = () => async dispatch => {\r\n    dispatch(contactsActions.fetchContactsRequest());\r\n  \r\n    try {\r\n      const { data } = await axios.get('/contacts');\r\n      dispatch(contactsActions.fetchContactsSuccess(data));\r\n    } catch (error) {\r\n      dispatch(contactsActions.fetchContactsError(error));\r\n    }\r\n  };\r\n  \r\n  export const addContact = (name, number) => async dispatch => {\r\n    const contact = {\r\n      name,\r\n      number,\r\n    };\r\n  \r\n    dispatch(addContactRequest());\r\n  \r\n    try {\r\n      const { data } = await axios.post('/contacts', contact);\r\n      dispatch(contactsActions.addContactSuccess(data));\r\n    } catch (error) {\r\n      dispatch(contactsActions.addContactError(error));\r\n    }\r\n  };\r\n  \r\n  export const deleteContact = contactId => dispatch => {\r\n    dispatch(contactsActions.deleteContactRequest());\r\n  \r\n    axios\r\n      .delete(`contacts/${contactId}`)\r\n      .then(() => dispatch(contactsActions.deleteContactSuccess(contactId)))\r\n      .catch(error => dispatch(contactsActions.deleteContactError(error)));\r\n  };\r\n\r\n"]},"metadata":{},"sourceType":"module"}